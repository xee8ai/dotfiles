# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

USERNAME=$(whoami)

# switch shell language to english to see english e.g. error messages
LANGUAGE=en_US.UTF-8

umask 027

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history file
# and erase all older occurences of a command from history
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000000
HISTFILESIZE=1000000

# add timestamp to command history
HISTTIMEFORMAT="| %Y-%m-%d %T |  "

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# check if liquidprompt is installed
if [[ $- = *i* ]]; then
    if [ -d /usr/share/liquidprompt ]; then
        # installed via apt-get
        echo "Using system installed liquidprompt."
        source /usr/share/liquidprompt/liquidprompt
    elif [ -d ~/.mybash/liquidprompt ]; then
        # Only load Liquid Prompt in interactive shells, not from a script or from scp
        # local version (git) is used
        echo "Using liquidprompt from git."
        source ~/.mybash/liquidprompt/liquidprompt
    fi
fi

# get general aliases and exports from separate file
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# add alternative bin directories in home
ALTBINS=$(ls -1 -- ~ | grep "altbin-")
for ALTBIN in $ALTBINS; do
    P=$HOME/$ALTBIN
    if [ -d $P ]; then 
        PATH="$PATH:$P"
    fi
done

if [ -f ~/bin/anniversary-processor/bash-processor.sh ]; then
    ~/bin/anniversary-processor/bash-processor.sh
fi

# disable Software Flow Control (XON/XOFF flow control)
# this e.g. prevents vim from splitting from CtrlP-Plugin using CTRL+S
# for details see: http://unix.stackexchange.com/questions/72086/ctrl-s-hang-terminal-emulator
# but for interactive shells only (http://stackoverflow.com/questions/24623021/getting-stty-standard-input-inappropriate-ioctl-for-device-when-using-scp-thro
# and http://unix.stackexchange.com/questions/26676/how-to-check-if-a-shell-is-login-interactive-batch)
# e.g. preventing errors around “stty: standard input: Inappropriate ioctl for device” on shell scripts using ssh connection
if [[ $- == *i* ]]; then
    stty -ixon
    date -Is > ~/.last_interactive_login
    if [ -f /home/par/bin/bashrc_addon.sh ]; then
        /home/par/bin/bashrc_addon.sh
    fi

	# show content of the memofile if exists and size is greater than zero
	MEMOFILE="/home/$USERNAME/.memo_bashrc"
	if [ -f $MEMOFILE ]; then
		if [ $(stat --printf="%s" $MEMOFILE) -gt 0 ]; then
			echo
			echo "--- MEMO -------------------------------"
			cat $MEMOFILE
			echo "----------------------------------------"
			echo
		fi
	else
		touch $MEMOFILE
	fi

fi
